{
	"info": {
		"_postman_id": "5ac7cbc9-a3c2-4884-bdd6-346e62ade076",
		"name": "Trade-Off Service Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5523150"
	},
	"item": [
		{
			"name": "Get Nodes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const startTime = new Date(), endTime = new Date();\r",
							"\r",
							"startTime.setHours(new Date().getHours() - 1);\r",
							"startTime.setMinutes(0);\r",
							"endTime.setHours(new Date().getHours() - 1);\r",
							"endTime.setMinutes(30);\r",
							"\r",
							"const startTimeString = startTime.toISOString().substr(0, 16) + \"Z\";\r",
							"const endTimeString = endTime.toISOString().substr(0, 16) + \"Z\";\r",
							"\r",
							"pm.environment.set(\"startTime\", startTimeString);\r",
							"pm.environment.set(\"endTime\", endTimeString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test nodes metrics response code\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test nodes metrics response body\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.worker_nodes).to.have.length.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/clusters/{{clusterId}}/nodes?startTime={{startTime}}&endTime={{endTime}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clusters",
						"{{clusterId}}",
						"nodes"
					],
					"query": [
						{
							"key": "startTime",
							"value": "{{startTime}}"
						},
						{
							"key": "endTime",
							"value": "{{endTime}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Node",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const startTime = new Date(), endTime = new Date();\r",
							"\r",
							"startTime.setHours(new Date().getHours() - 1);\r",
							"startTime.setMinutes(0);\r",
							"endTime.setHours(new Date().getHours() - 1);\r",
							"endTime.setMinutes(30);\r",
							"\r",
							"const startTimeString = startTime.toISOString().substr(0, 16) + \"Z\";\r",
							"const endTimeString = endTime.toISOString().substr(0, 16) + \"Z\";\r",
							"\r",
							"pm.environment.set(\"startTime\", startTimeString);\r",
							"pm.environment.set(\"endTime\", endTimeString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test node metrics response code\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test node metrics response body\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    const responseBody = pm.response.json();\r",
							"    const resources = responseBody.resources;\r",
							"    const resourcesKeys = Object.keys(resources);\r",
							"    const nonEmptyResources = resourcesKeys.filter(key => {\r",
							"        if (isEmptyObject(resources[key])) {\r",
							"            console.warn(`Resource '${key}' is empty!`);\r",
							"            return false;\r",
							"        }\r",
							"        return true;\r",
							"    });\r",
							"    pm.expect(nonEmptyResources).to.be.not.empty;\r",
							"});\r",
							"\r",
							"function isEmptyObject(obj) {\r",
							"    for (key in obj) return false;\r",
							"    return true;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/clusters/{{clusterId}}/nodes/{{nodeId}}?startTime={{startTime}}&endTime={{endTime}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clusters",
						"{{clusterId}}",
						"nodes",
						"{{nodeId}}"
					],
					"query": [
						{
							"key": "startTime",
							"value": "{{startTime}}"
						},
						{
							"key": "endTime",
							"value": "{{endTime}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Workloads",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const startTime = new Date(), endTime = new Date();\r",
							"\r",
							"startTime.setHours(new Date().getHours() - 1);\r",
							"startTime.setMinutes(0);\r",
							"endTime.setHours(new Date().getHours() - 1);\r",
							"endTime.setMinutes(30);\r",
							"\r",
							"const startTimeString = startTime.toISOString().substr(0, 16) + \"Z\";\r",
							"const endTimeString = endTime.toISOString().substr(0, 16) + \"Z\";\r",
							"\r",
							"pm.environment.set(\"startTime\", startTimeString);\r",
							"pm.environment.set(\"endTime\", endTimeString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test workloads metrics response code\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test workloads metrics response body\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.workloads).to.have.length.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/clusters/{{clusterId}}/workloads?startTime={{startTime}}&endTime={{endTime}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clusters",
						"{{clusterId}}",
						"workloads"
					],
					"query": [
						{
							"key": "startTime",
							"value": "{{startTime}}"
						},
						{
							"key": "endTime",
							"value": "{{endTime}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Workload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const startTime = new Date(), endTime = new Date();\r",
							"\r",
							"startTime.setHours(new Date().getHours() - 1);\r",
							"startTime.setMinutes(0);\r",
							"endTime.setHours(new Date().getHours() - 1);\r",
							"endTime.setMinutes(30);\r",
							"\r",
							"const startTimeString = startTime.toISOString().substr(0, 16) + \"Z\";\r",
							"const endTimeString = endTime.toISOString().substr(0, 16) + \"Z\";\r",
							"\r",
							"pm.environment.set(\"startTime\", startTimeString);\r",
							"pm.environment.set(\"endTime\", endTimeString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test workload metrics response code\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test workload metrics response body\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    const responseBody = pm.response.json();\r",
							"    const resources = responseBody.resources;\r",
							"    const resourcesKeys = Object.keys(resources);\r",
							"    const nonEmptyResources = resourcesKeys.filter(key => {\r",
							"        if (isEmptyObject(resources[key])) {\r",
							"            console.warn(`Resource '${key}' is empty!`);\r",
							"            return false;\r",
							"        }\r",
							"        return true;\r",
							"    });\r",
							"    pm.expect(nonEmptyResources).to.be.not.empty;\r",
							"\r",
							"    if (isEmptyObject(responseBody.runs_on)) console.warn(\"runs_on object is empty!\");\r",
							"    pm.expect(responseBody.runs_on).to.be.not.empty;\r",
							"});\r",
							"\r",
							"function isEmptyObject(obj) {\r",
							"    for (key in obj) return false;\r",
							"    return true;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/clusters/{{clusterId}}/workloads/{{workloadId}}?startTime={{startTime}}&endTime={{endTime}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clusters",
						"{{clusterId}}",
						"workloads",
						"{{workloadId}}"
					],
					"query": [
						{
							"key": "startTime",
							"value": "{{startTime}}"
						},
						{
							"key": "endTime",
							"value": "{{endTime}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Service Healthcheck\", () => {\r",
							"    pm.response.to.be.ok;\r",
							"    // pm.response.to.have.body(/up and running/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	]
}